name: Tests
on: [push, pull_request, workflow_dispatch]
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
        tox_env: ['sqlalchemy14', 'sqlalchemy2']
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sqlalchemy_utils_test
        # Set health checks to wait until PostgreSQL has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: sqlalchemy_utils_test
        ports:
          - 3306:3306
      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Strong_Passw0rd
        # Set health checks to wait until SQL Server has started
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD} -Q 'SELECT 1;' -b"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 1433:1433
    steps:
      - uses: actions/checkout@v4
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
      - name: Set up Python
        run: uv python install ${{ matrix.python-version }}
      - name: Create virtual environment
        run: uv venv
      - name: Install MS SQL stuff
        run: bash .ci/install_mssql.sh
      - name: Add hstore extension to the sqlalchemy_utils_test database
        env:
          PGHOST: localhost
          PGPASSWORD: postgres
          PGPORT: 5432
        run: psql -U postgres -d sqlalchemy_utils_test -c 'CREATE EXTENSION hstore;'
      - name: Install tox
        run: uv pip install tox
      - name: Run tests
        env:
          SQLALCHEMY_UTILS_TEST_POSTGRESQL_PASSWORD: postgres
        run: uv run tox -e ${{ matrix.tox_env }}

  docs:
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v4
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
      - name: Set up Python
        run: uv python install 3.13
      - name: Create virtual environment
        run: uv venv
      - name: Install tox
        run: uv pip install tox
      - name: Build documentation
        run: uv run tox -e docs
